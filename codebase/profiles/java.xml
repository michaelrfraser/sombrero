<?xml version="1.0"?>
<!--
             This project is using the Portico Build System
             https://github.com/timpokorny/build-skeleton

                                  888                                      
                                  888                                      
                                  888                                      
  .d8888b   .d88b.  88888b.d88b.  88888b.  888d888 .d88b.  888d888 .d88b.  
  88K      d88""88b 888 "888 "88b 888 "88b 888P"  d8P  Y8b 888P"  d88""88b 
  "Y8888b. 888  888 888  888  888 888  888 888    88888888 888    888  888 
       X88 Y88..88P 888  888  888 888 d88P 888    Y8b.     888    Y88..88P 
   88888P'  "Y88P"  888  888  888 88888P"  888     "Y8888  888     "Y88P"  
                                                                      

         File: profiles/java.xml
      Purpose: The common java profile defining compile, test, jar
               and sandbox tasks. As Java is cross platform, it is
               possible to combine most of this work under a single
               file. However, split it out into several smaller
               distribution-specific files if you must.
-->
<project name="java">

	<!-- ================================================================================= -->
	<!--                                 General Settings                                  -->
	<!-- ================================================================================= -->
	<description>
		Java build profile for main source modules
	</description>

	<!-- ==== Basic Properties ==== -->
	<property name="java.src.dir"             location="${src.dir}/java"/>
	<property name="java.build.dir"           location="${build.dir}/java"/>
	<property name="resources.jars.dir"       location="${resources.dir}/jars"/>

	<!-- ==== Source Related Properties ==== -->
	<property name="sombrero.src.dir"          location="${java.src.dir}/sombrero"/>
	<property name="sombrero.build.dir"        location="${java.build.dir}/sombrero"/>
	<property name="sombrero.classes.dir"      location="${sombrero.build.dir}/classes"/>

	<!-- ==== Test Related Properties ==== -->
	<property name="test.src.dir"             location="${java.src.dir}/test"/>
	<property name="test.build.dir"           location="${java.build.dir}/test"/>
	<property name="test.classes.dir"         location="${test.build.dir}/classes"/>
	<property name="test.reports.dir"         location="${test.build.dir}/reports"/>

	<property name="test.loglevel"            value="OFF"/>
	<property name="test.fileLogLevel"        value="OFF"/>

	<!-- ==== Javadoc Related Properties ==== -->
	<property name="javadoc.copyright"        value="Copyright Open LVC ${YEAR}."/>
	<property name="javadoc.window"           value="${build.shortname} [${build.version} build] Javadoc"/>
	<!-- defaults used by the macro -->
	<property name="javadoc.windowtitle"      value="Sombrero [${build.version} build]"/>
	<property name="javadoc.header"           value="${javadoc.windowtitle}"/>
	<property name="javadoc.footer"           value="${javadoc.windowtitle}"/>
	<property name="javadoc.xparams"          value="-Xdoclint:-missing"/>

	<!-- =========================================================== -->
	<!--                     Project Libraries                       -->
	<!-- =========================================================== -->
	<!-- ==== Library Path Definitions ==== -->
	<!-- These properties are set so that any information relating to a specific path
	     for a library can be changed in a single spot. The properties should be used
	     when defining paths and the like later in the build file -->
	<property name="testng.dir"            location="${lib.dir}/testng/testng-6.8"/>

	<!-- Classpaths for individual libraries -->
	<path id="lib.testng.classpath">
		<fileset dir="${testng.dir}" includes="**/*.jar"/>
	</path>

	<!-- ========================== -->
	<!-- Classpath Set Declarations -->
	<!-- ========================== -->
	<path id="compile.classpath">
		
	</path>

	<path id="test.classpath">
		<path refid="compile.classpath"/>
		<path refid="lib.testng.classpath"/>
		<pathelement path="${sombrero.classes.dir}"/>
		<pathelement path="${test.classes.dir}"/>
		<pathelement path="${resources.dir}/jars/sombrero.jar"/>
		<pathelement path="${resources.dir}/testdata"/>
	</path>

	<!-- generate the classpath for the manifest -->
	<manifestclasspath property="sombrero.manifest.classpath" jarfile="${lib.dir}/sombrero.jar">
		<classpath refid="compile.classpath"/>
	</manifestclasspath>

	<!-- ================================================================================= -->
	<!--                                   Clean Targets                                   -->
	<!-- ================================================================================= -->
	<target name="clean" extensionOf="master.clean">
		<delete dir="${java.build.dir}"/>
		<delete dir="logs"/>
	</target>

	<!-- ================================================================================= -->
	<!--                                  Compile Targets                                  -->
	<!-- ================================================================================= -->
	<!--
	     Local compilation extension point for all Java targets. Each Java compilation target
	     should declare itself an extension of this point to link into the main build.
	-->
	<extension-point name="compile"
	                 extensionOf="master.compile"
	                 description="Compile the main projection and test modules"/>

	<!-- compile the main production code -->
	<target name="compile.sombrero" extensionOf="compile">
		<java-compile srcdir="${sombrero.src.dir}"
		              outdir="${sombrero.classes.dir}"
		              classpath="compile.classpath"/>
	</target>

	<!-- compile the test suite code -->
	<target name="compile.tests" extensionOf="compile" depends="compile.sombrero">
		<java-compile srcdir="${test.src.dir}"
		              outdir="${test.classes.dir}"
		              classpath="test.classpath"/>
	</target>

	<!-- ================================================================================= -->
	<!--                                  Testing Targets                                  -->
	<!-- ================================================================================= -->
	<!--
	     The parent testing target that will invoke the various Java testing suites
	-->
	<target name="test"
	        extensionOf="master.test"
	        depends="test.sombrero"/>

	<!-- Run the core Sombrero test suite -->
	<target name="test.sombrero" depends="compile.tests">
		<java-test suite="org/openlvc/sombrero"
		           groups="${test.groups}"
		           classdir="${test.classes.dir}"
		           outdir="${test.reports.dir}"
		           classpath="test.classpath">
			<jvmarg value="-Dtest.loglevel=${test.loglevel}"/>
			<jvmarg value="-Dtest.fileLogLevel=${test.fileLogLevel}"/>
			<jvmarg value="-Dtest.root.dir=${test.root.dir}"/>
	     </java-test>
	</target>


	<!-- ================================================================================= -->
	<!--                                  Sandbox Targets                                  -->
	<!-- ================================================================================= -->
	<!--
	     The main sandbox preparation target. This will aggregate together all the various
	     required artefacts scattered around the build environment into the structure that
	     should be present when installed on a users system (relative to the sandbox dir).
	-->
	<target name="sandbox" extensionOf="master.sandbox" depends="compile,jars">
		<!-- create the required directories -->
		<mkdir dir="${dist.dir}"/>
		<mkdir dir="${sandbox.dir}"/>
		
		<copy todir="${sandbox.dir}">
			<fileset dir="${basedir}" includes="LICENSE.sombrero"/>
		</copy>
		
		<!-- copy across the resources -->
		<!--
		<copy todir="${sandbox.dir}">
			<fileset dir="${resources.dist.dir}/common" includes="**/*"/>
		</copy>
		-->

		<!-- Run platform specific fixes such as fixing crlf for Windows bound files! -->

	</target>

	<!-- ==================================== -->
	<!--           Jar File Targets           -->
	<!-- ==================================== -->
	<!--
	     Add an extension point that all jar file generation targets can tack on to. If there
	     is only a single jar file, this is somewhat redundant, but leaving for common structure
	     across builds for other projects as well.
	-->
	<extension-point name="jars"/>

	<!-- build the main sombrero jar file -->
	<target name="jar.sombrero" extensionOf="jars" depends="compile">
		<!-- construct the main jar file -->
		<jar destfile="${sandbox.dir}/sombrero.jar">
			<!-- sombrero code -->
			<fileset dir="${sombrero.classes.dir}" includes="**/*.class"/>

			<!-- internal jar resources -->
			<!-- <fileset dir="${resources.jars.dir}/sombrero.jar" includes="**/*"/> -->

			<!-- license -->
			<fileset dir="${basedir}" includes="LICENSE.sombrero"/>

			<!-- build.properties file for version information -->
			<fileset dir="${basedir}" includes="build.properties"/>

			<!-- MANIFEST -->
			<manifest>
				<attribute name="Product"          value="Open LVC Sombrero"/>
				<attribute name="Product-Version"  value="${build.version}"/>
				<attribute name="Built-By"         value="Open LVC"/>
				<attribute name="Built-Date"       value="${TODAY}"/>
				<attribute name="Class-Path"       value="../ ${sombrero.manifest.classpath}"/>
				<section name="org/openlvc/sombrero">
					<attribute name="Implementation-Title" value="org.openlvc.sombrero"/>
					<attribute name="Implementation-Version" value="${build.version} (build ${build.number}) ${TODAY}"/>
					<attribute name="Implementation-Vendor" value="Open LVC"/>
				</section>
			</manifest>
		</jar>
	</target>

	<!-- ================================================================================= -->
	<!--                             Release Generation Targets                            -->
	<!-- ================================================================================= -->
	<!--
	     The parent release target. This will run a clean and then compile all code, run all
	     tests, generate a sandbox and place all additional release artefacts (such as javadoc)
	     in with it in preparation for release.
	-->
	<target name="release"
	        extensionOf="master.release"
	        depends="clean,test,sandbox,javadoc"/>

	<!-- Generate the javadocs and place them in the sandbox. We only do this for a release
	     build because of the amount of time it takes -->
	<target name="javadoc" depends="sandbox" if="build.release">
		<!-- Make room in the sandbox for the javadoc. Create a property for shortcut purposes -->
		<property name="javadoc.dir" value="${sandbox.dir}/docs/javadoc"/>
		<mkdir dir="${javadoc.dir}"/>

		<echo>Generating Open LVC Sombrero Javadoc</echo>
		<java-javadoc outdir="${javadoc.dir}"
		              packages="org.openlvc.sombrero,org.openlvc.sombrero.*"
		              sourcepath="${sombrero.src.dir}"
		              classpath="compile.classpath"
		              windowtitle="Open LVC Sombrero - Javadoc"
		              header="Open LVC Sombrero"
		              additionalParams="${javadoc.xparams}"/>
	</target>

</project>
